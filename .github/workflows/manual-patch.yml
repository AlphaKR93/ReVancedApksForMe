name: Manual Patch
permissions: write-all
env:
  repository: ${{ github.repository }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  retry_count: ${{ github.event.inputs.retry_count }}
  max_retries: 3
  org_input: ${{ inputs.org }}
  org_event_input: ${{ github.event.inputs.org }}
on:
  workflow_dispatch:
    inputs:
      org:
        description: 'Which "Revanced" do you want to patch?'
        required: true
        default: 'Revanced'
        type: choice
        options:
          - 'All'
          - 'Rex-anddea-beta'
          - 'Rex-anddea-beta-yt'
          - 'Rex-anddea-beta-music'
          - 'Twitter Piko Beta'
          - 'Discord Pyoncord'
      verbose:
        description: 'Enable verbose mode?'
        required: true
        default: false
        type: boolean
      debug:
        description: 'Enable debug mode?'
        required: true
        default: false
        type: boolean
      retry_count:
        description: 'Do not change value below'
        required: false
        default: '1'
      rex:
        description: "ReVanced YT Version"
        required: false
        default: ''
      rexm:
        description: "ReVanced YT Music Version"
        required: false
        default: ''
      twitter:
        description: "Twitter Piko Version"
        required: false
        default: ''
  workflow_call:
    inputs:
      org:
        required: true
        type: string
jobs:
  patch_rex_anddea_beta:
    name: Patch ReX forked by anddea beta
    if: ${{ github.event.inputs.org == 'ReX-anddea-beta' || github.event.inputs.org == 'ReX-anddea-beta-yt' || github.event.inputs.org == 'All' || inputs.org == 'ReX-anddea-beta-yt' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      - name: Preparing to patch
        uses: ./.github/actions/preparing
      - name: Check github connection
        id: check-gh-rex-anddea-beta
        run: bash src/etc/connection.sh
      - name: Patch apk
        id: patch-rex-anddea-beta
        if: steps.check-gh-rex-anddea-beta.outputs.internet_error == '0'
        run: bash src/build/ReX-anddea.sh ${{ github.event.inputs.verbose }} ${{ github.event.inputs.debug }} ${{ github.event.inputs.rex }}
      - name: Releasing APK files
        id: release-rex-anddea-beta
        if: steps.check-gh-rex-anddea-beta.outputs.internet_error == '0'
        uses: ./.github/actions/release
      - name: Re-run workflow if github connection not stable
        if: always() && steps.patch-rex-anddea-beta.outcome == 'skipped' || steps.release-rex-anddea-beta.outcome == 'skipped' && env.retry_count < env.max_retries
        uses: ./.github/actions/re-run
  patch_rex_anddea_beta_music:
    name: Patch ReX Music forked by anddea beta
    if: ${{ github.event.inputs.org == 'ReX-anddea-beta' || github.event.inputs.org == 'ReX-anddea-beta-music' || github.event.inputs.org == 'All' || inputs.org == 'ReX-anddea-beta-music' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      - name: Preparing to patch
        uses: ./.github/actions/preparing
      - name: Check github connection
        id: check-gh-rex-anddea-beta
        run: bash src/etc/connection.sh
      - name: Patch apk
        id: patch-rex-anddea-beta
        if: steps.check-gh-rex-anddea-beta.outputs.internet_error == '0'
        run: bash src/build/ReX-anddea-music.sh ${{ github.event.inputs.verbose }} ${{ github.event.inputs.debug }} ${{ github.event.inputs.rexm }}
      - name: Releasing APK files
        id: release-rex-anddea-beta
        if: steps.check-gh-rex-anddea-beta.outputs.internet_error == '0'
        uses: ./.github/actions/release
      - name: Re-run workflow if github connection not stable
        if: always() && steps.patch-rex-anddea-beta.outcome == 'skipped' || steps.release-rex-anddea-beta.outcome == 'skipped' && env.retry_count < env.max_retries
        uses: ./.github/actions/re-run
  patch_twitter_piko_beta:
    name: Patch Twitter Piko Beta
    if: ${{ github.event.inputs.org == 'Twitter Piko Beta' || github.event.inputs.org == 'All' || inputs.org == 'Twitter Piko Beta' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      - name: Preparing to patch
        uses: ./.github/actions/preparing
      - name: Check github connection
        id: check-gh-piko-beta
        run: bash src/etc/connection.sh
      - name: Patch apk
        id: patch-piko-beta
        if: steps.check-gh-piko-beta.outputs.internet_error == '0'
        run: bash src/build/Piko.sh ${{ github.event.inputs.verbose }} ${{ github.event.inputs.debug }} ${{ github.event.inputs.twitter }}
      - name: Releasing APK files
        id: release-piko-beta
        if: steps.check-gh-piko-beta.outputs.internet_error == '0'
        uses: ./.github/actions/release
      - name: Re-run workflow if github connection not stable
        if: always() && steps.patch-piko-beta.outcome == 'skipped' || steps.release-piko-beta.outcome == 'skipped' && env.retry_count < env.max_retries
        uses: ./.github/actions/re-run
  patch_discord_pyoncord:
    name: Patch Discord Pyoncord
    if: ${{ github.event.inputs.org == 'Discord Pyoncord' || github.event.inputs.org == 'All' || inputs.org == 'Discord Pyoncord' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      - name: Preparing to patch
        uses: ./.github/actions/preparing
      - name: Check github connection
        id: check-gh-pyoncord
        run: bash src/etc/connection.sh
      - name: Patch apk
        id: patch-pyoncord
        if: steps.check-gh-pyoncord.outputs.internet_error == '0'
        run: bash src/build/Pyoncord.sh ${{ github.event.inputs.verbose }} ${{ github.event.inputs.debug }} ${{ github.event.inputs.twitter }}
      - name: Releasing APK files
        id: release-pyoncord
        if: steps.check-gh-pyoncord.outputs.internet_error == '0'
        uses: ./.github/actions/release
      - name: Re-run workflow if github connection not stable
        if: always() && steps.patch-pyoncord.outcome == 'skipped' || steps.release-pyoncord.outcome == 'skipped' && env.retry_count < env.max_retries
        uses: ./.github/actions/re-run
